
Blutooth_Test_Prog_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  008001ae  008001ae  00000784  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000104  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb3  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a5  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b0  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e5  00000000  00000000  00002683  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 3a       	cpi	r26, 0xAE	; 174
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae ea       	ldi	r26, 0xAE	; 174
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 3c       	cpi	r26, 0xCC	; 204
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  c6:	0c 94 1f 03 	jmp	0x63e	; 0x63e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_18>:
////

// UART0 수신 인터럽트 서비스 프로그렘 

ISR(  USART0_RX_vect )
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31

    static unsigned char r_cnt = 0 ;

    rdata = UDR0; 
  e4:	8c b1       	in	r24, 0x0c	; 12
  e6:	80 93 b3 01 	sts	0x01B3, r24

    if( rdata != '.' )                      // 수신된 데이터가 마지막 문자를 나타내는 데이터(마침표)가 아니면
  ea:	80 91 b3 01 	lds	r24, 0x01B3
  ee:	8e 32       	cpi	r24, 0x2E	; 46
  f0:	a1 f0       	breq	.+40     	; 0x11a <__vector_18+0x4c>
    {
        SerialPutChar( rdata);               // Echo  수신된 데이터를 바로 송신하여 수신된 데이터가 정확한지 확인 
  f2:	80 91 b3 01 	lds	r24, 0x01B3
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <__vector_18+0x28>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
  fa:	8c b9       	out	0x0c, r24	; 12
    rdata = UDR0; 

    if( rdata != '.' )                      // 수신된 데이터가 마지막 문자를 나타내는 데이터(마침표)가 아니면
    {
        SerialPutChar( rdata);               // Echo  수신된 데이터를 바로 송신하여 수신된 데이터가 정확한지 확인 
   	    recv_data[r_cnt] = rdata;        //  수신된 문자 저장 
  fc:	80 91 ca 01 	lds	r24, 0x01CA
 100:	e8 2f       	mov	r30, r24
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 91 b3 01 	lds	r25, 0x01B3
 108:	ec 54       	subi	r30, 0x4C	; 76
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	90 83       	st	Z, r25
	    r_cnt++;                         //  수신 문자 갯수 증가 
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 ca 01 	sts	0x01CA, r24

		new_recv_flag = 0;
 114:	10 92 c8 01 	sts	0x01C8, r1
 118:	11 c0       	rjmp	.+34     	; 0x13c <__vector_18+0x6e>

    }
    else if(  rdata == '.' )                // 수신된데이터가 마지막 문자를 나타내는 데이터(마침표) 이면
 11a:	80 91 b3 01 	lds	r24, 0x01B3
 11e:	8e 32       	cpi	r24, 0x2E	; 46
 120:	69 f4       	brne	.+26     	; 0x13c <__vector_18+0x6e>
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 122:	5d 9b       	sbis	0x0b, 5	; 11
 124:	fe cf       	rjmp	.-4      	; 0x122 <__vector_18+0x54>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	8c b9       	out	0x0c, r24	; 12

    }
    else if(  rdata == '.' )                // 수신된데이터가 마지막 문자를 나타내는 데이터(마침표) 이면
    {
        SerialPutChar('\n');                // 휴대폰으로 데이터 전송시 Line Feed('\n')를 항상 끝에 전송해야함 
        recv_cnt = r_cnt ;                  // 수신된 데이터 바이트수 저장
 12a:	80 91 ca 01 	lds	r24, 0x01CA
 12e:	80 93 c9 01 	sts	0x01C9, r24
        r_cnt = 0;  
 132:	10 92 ca 01 	sts	0x01CA, r1
        
		new_recv_flag = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 c8 01 	sts	0x01C8, r24

    }
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0b be       	out	0x3b, r0	; 59
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <init_serial>:



void init_serial(void)
{
    UCSR0A=0x00;                    //초기화
 152:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x18  ;                //송수신허용,  송수신 인터럽트 금지
 154:	88 e1       	ldi	r24, 0x18	; 24
 156:	8a b9       	out	0x0a, r24	; 10
    UCSR0C=0x06;                    //데이터 전송비트 수 8비트로 설정.
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	80 93 95 00 	sts	0x0095, r24
    
    UBRR0H=0x00;
 15e:	10 92 90 00 	sts	0x0090, r1
    UBRR0L=103;                     //Baud Rate 9600 
 162:	87 e6       	ldi	r24, 0x67	; 103
 164:	89 b9       	out	0x09, r24	; 9
}
 166:	08 95       	ret

00000168 <SerialPutChar>:
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <SerialPutChar>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 16c:	8c b9       	out	0x0c, r24	; 12
}
 16e:	08 95       	ret

00000170 <SerialPutString>:
// 문자열을 송신한다.
// 입력   : str - 송신한 문자열을 저장할 버퍼의 주소
//=============================================

 void SerialPutString(char *str)
 {
 170:	fc 01       	movw	r30, r24
 172:	04 c0       	rjmp	.+8      	; 0x17c <SerialPutString+0xc>
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 174:	5d 9b       	sbis	0x0b, 5	; 11
 176:	fe cf       	rjmp	.-4      	; 0x174 <SerialPutString+0x4>
 {

    while(*str != '\0')
    {

        SerialPutChar(*str++);
 178:	31 96       	adiw	r30, 0x01	; 1
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 17a:	8c b9       	out	0x0c, r24	; 12
//=============================================

 void SerialPutString(char *str)
 {

    while(*str != '\0')
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	c9 f7       	brne	.-14     	; 0x174 <SerialPutString+0x4>
    {

        SerialPutChar(*str++);
    }
}
 182:	08 95       	ret

00000184 <HexToDec>:



void HexToDec(unsigned short num, unsigned short radix)
{
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	9c 01       	movw	r18, r24
 18e:	8b 01       	movw	r16, r22
	int j = 0;

	for(j=0; j<5; j++) cnumber[j] = 0;
 190:	10 92 ae 01 	sts	0x01AE, r1
 194:	10 92 af 01 	sts	0x01AF, r1
 198:	10 92 b0 01 	sts	0x01B0, r1
 19c:	10 92 b1 01 	sts	0x01B1, r1
 1a0:	10 92 b2 01 	sts	0x01B2, r1
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0

	j=0;

	do
	{
		cnumber[j++] = num % radix;
 1a8:	c9 01       	movw	r24, r18
 1aa:	b8 01       	movw	r22, r16
 1ac:	0e 94 0b 03 	call	0x616	; 0x616 <__udivmodhi4>
 1b0:	fe 01       	movw	r30, r28
 1b2:	e2 55       	subi	r30, 0x52	; 82
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	80 83       	st	Z, r24
 1b8:	21 96       	adiw	r28, 0x01	; 1
		num /= radix;
 1ba:	c9 01       	movw	r24, r18
 1bc:	b8 01       	movw	r22, r16
 1be:	0e 94 0b 03 	call	0x616	; 0x616 <__udivmodhi4>
 1c2:	9b 01       	movw	r18, r22

	}while(num);
 1c4:	61 15       	cp	r22, r1
 1c6:	71 05       	cpc	r23, r1
 1c8:	79 f7       	brne	.-34     	; 0x1a8 <HexToDec+0x24>
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <NumToAsc>:


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <NumToAsc+0x8>
 1d8:	89 5c       	subi	r24, 0xC9	; 201
 1da:	08 95       	ret
	else	      Num += 0x30;
 1dc:	80 5d       	subi	r24, 0xD0	; 208

	return Num;
}
 1de:	08 95       	ret

000001e0 <msec_delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e0:	20 ea       	ldi	r18, 0xA0	; 160
 1e2:	3f e0       	ldi	r19, 0x0F	; 15
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <msec_delay+0xe>
 1e6:	f9 01       	movw	r30, r18
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <msec_delay+0x8>
}


void msec_delay( int n )
{
	for(; n> 0 ; n-- )   _delay_ms(1); 
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	18 16       	cp	r1, r24
 1f0:	19 06       	cpc	r1, r25
 1f2:	cc f3       	brlt	.-14     	; 0x1e6 <msec_delay+0x6>
}
 1f4:	08 95       	ret

000001f6 <Display_Number_LCD>:
}



void Display_Number_LCD( unsigned int num, unsigned char digit )       // 부호없는 정수형 변수를 10진수 형태로 LCD 에 디스플레이 
{
 1f6:	1f 93       	push	r17
 1f8:	16 2f       	mov	r17, r22

	HexToDec( num, 10); //10진수로 변환 
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 c2 00 	call	0x184	; 0x184 <HexToDec>

	if( digit == 0 )     digit = 1 ;
 202:	11 23       	and	r17, r17
 204:	81 f1       	breq	.+96     	; 0x266 <Display_Number_LCD+0x70>
	if( digit > 5 )      digit = 5 ;
 206:	16 30       	cpi	r17, 0x06	; 6
 208:	10 f0       	brcs	.+4      	; 0x20e <Display_Number_LCD+0x18>
 20a:	15 e0       	ldi	r17, 0x05	; 5
 20c:	02 c0       	rjmp	.+4      	; 0x212 <Display_Number_LCD+0x1c>
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
 20e:	15 30       	cpi	r17, 0x05	; 5
 210:	49 f4       	brne	.+18     	; 0x224 <Display_Number_LCD+0x2e>
 212:	80 91 b2 01 	lds	r24, 0x01B2


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 216:	8a 30       	cpi	r24, 0x0A	; 10
 218:	10 f0       	brcs	.+4      	; 0x21e <Display_Number_LCD+0x28>
 21a:	89 5c       	subi	r24, 0xC9	; 201
 21c:	01 c0       	rjmp	.+2      	; 0x220 <Display_Number_LCD+0x2a>
	else	      Num += 0x30;
 21e:	80 5d       	subi	r24, 0xD0	; 208
	HexToDec( num, 10); //10진수로 변환 

	if( digit == 0 )     digit = 1 ;
	if( digit > 5 )      digit = 5 ;
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
 220:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LcdPutchar>
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 224:	14 30       	cpi	r17, 0x04	; 4
 226:	48 f0       	brcs	.+18     	; 0x23a <Display_Number_LCD+0x44>
 228:	80 91 b1 01 	lds	r24, 0x01B1


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 22c:	8a 30       	cpi	r24, 0x0A	; 10
 22e:	10 f0       	brcs	.+4      	; 0x234 <Display_Number_LCD+0x3e>
 230:	89 5c       	subi	r24, 0xC9	; 201
 232:	01 c0       	rjmp	.+2      	; 0x236 <Display_Number_LCD+0x40>
	else	      Num += 0x30;
 234:	80 5d       	subi	r24, 0xD0	; 208
	if( digit == 0 )     digit = 1 ;
	if( digit > 5 )      digit = 5 ;
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 236:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LcdPutchar>

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 23a:	13 30       	cpi	r17, 0x03	; 3
 23c:	48 f0       	brcs	.+18     	; 0x250 <Display_Number_LCD+0x5a>
 23e:	80 91 b0 01 	lds	r24, 0x01B0


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 242:	8a 30       	cpi	r24, 0x0A	; 10
 244:	10 f0       	brcs	.+4      	; 0x24a <Display_Number_LCD+0x54>
 246:	89 5c       	subi	r24, 0xC9	; 201
 248:	01 c0       	rjmp	.+2      	; 0x24c <Display_Number_LCD+0x56>
	else	      Num += 0x30;
 24a:	80 5d       	subi	r24, 0xD0	; 208
 
    if( digit >= 5 )     LcdPutchar( NumToAsc(cnumber[4]) );  // 10000자리 디스플레이
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 24c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LcdPutchar>

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 250:	11 30       	cpi	r17, 0x01	; 1
 252:	49 f0       	breq	.+18     	; 0x266 <Display_Number_LCD+0x70>
 254:	80 91 af 01 	lds	r24, 0x01AF


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 258:	8a 30       	cpi	r24, 0x0A	; 10
 25a:	10 f0       	brcs	.+4      	; 0x260 <Display_Number_LCD+0x6a>
 25c:	89 5c       	subi	r24, 0xC9	; 201
 25e:	01 c0       	rjmp	.+2      	; 0x262 <Display_Number_LCD+0x6c>
	else	      Num += 0x30;
 260:	80 5d       	subi	r24, 0xD0	; 208
	
	if( digit >= 4 )     LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 262:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LcdPutchar>

	if( digit >= 1 )     LcdPutchar(NumToAsc(cnumber[0]));    //  1자리 디스플레이
 266:	80 91 ae 01 	lds	r24, 0x01AE


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 26a:	8a 30       	cpi	r24, 0x0A	; 10
 26c:	10 f0       	brcs	.+4      	; 0x272 <Display_Number_LCD+0x7c>
 26e:	89 5c       	subi	r24, 0xC9	; 201
 270:	01 c0       	rjmp	.+2      	; 0x274 <Display_Number_LCD+0x7e>
	else	      Num += 0x30;
 272:	80 5d       	subi	r24, 0xD0	; 208

	if( digit >= 3 )     LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 

	if( digit >= 2 )     LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이

	if( digit >= 1 )     LcdPutchar(NumToAsc(cnumber[0]));    //  1자리 디스플레이
 274:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LcdPutchar>

}
 278:	1f 91       	pop	r17
 27a:	08 95       	ret

0000027c <main>:

/********************************************************************************************************************
                                      					main
********************************************************************************************************************/
int main(void)
{ 
 27c:	ff 92       	push	r15
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 
   	 char    eq_count1=0, eq_count2=0, eq_count3=0, eq_count4=0, eq_count5 = 0, eq_count6 = 0, cmd_data = 0xFF  ;  	  
     unsigned char   i=0 ;

	 DDRB |= 0x10 ; 	// LED (PB4 ) :출력설정	
 282:	bc 9a       	sbi	0x17, 4	; 23
	 DDRB |= 0x40 ; 
 284:	be 9a       	sbi	0x17, 6	; 23

	 PORTB |= 0x10 ;    // LED OFF
 286:	c4 9a       	sbi	0x18, 4	; 24
	 PORTB &= ~0x40;
 288:	c6 98       	cbi	0x18, 6	; 24



void init_serial(void)
{
    UCSR0A=0x00;                    //초기화
 28a:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0x18  ;                //송수신허용,  송수신 인터럽트 금지
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	8a b9       	out	0x0a, r24	; 10
    UCSR0C=0x06;                    //데이터 전송비트 수 8비트로 설정.
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	80 93 95 00 	sts	0x0095, r24
    
    UBRR0H=0x00;
 296:	10 92 90 00 	sts	0x0090, r1
    UBRR0L=103;                     //Baud Rate 9600 
 29a:	87 e6       	ldi	r24, 0x67	; 103
 29c:	89 b9       	out	0x09, r24	; 9

	 PORTB |= 0x10 ;    // LED OFF
	 PORTB &= ~0x40;
     init_serial() ;    // Serial Port (USART1) 초기화

     LcdInit();         // LCD 초기화 
 29e:	0e 94 c8 02 	call	0x590	; 0x590 <LcdInit>


     UCSR0B |=  0x80  ;      // 송신(RX) 완료 인터럽트 허용
 2a2:	57 9a       	sbi	0x0a, 7	; 10
	 sei() ;                 // 전역인터럽트허용
 2a4:	78 94       	sei

     LcdCommand( ALLCLR ) ;    // LCD Clear
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
  	 LcdMove(0,0);    
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	0e 94 be 02 	call	0x57c	; 0x57c <LcdMove>
	 LcdPuts("Bluetooth Prog"); 
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 84 02 	call	0x508	; 0x508 <LcdPuts>
 
  	 LcdMove(1,0);    
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	0e 94 be 02 	call	0x57c	; 0x57c <LcdMove>
	 LcdPuts("Send Command."); 
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 84 02 	call	0x508	; 0x508 <LcdPuts>
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 2cc:	0a e0       	ldi	r16, 0x0A	; 10
			{
                PORTB |= 0x10;            // LED OFF
			}
			else if( cmd_data == 3 )      // 명령 3 이면
			{
                PORTB ^= 0x10;            // LED Toggle
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	f8 2e       	mov	r15, r24

  
	 while(1)
	 {

            if( new_recv_flag == 1 )      // 문자열 수신완료 시 
 2d2:	80 91 c8 01 	lds	r24, 0x01C8
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x60>
 2da:	c5 c0       	rjmp	.+394    	; 0x466 <main+0x1ea>
			{ 

		        if( Command_Error_Flag == 1 )    // 이전 명령에 오류가 있었으면
 2dc:	80 91 cb 01 	lds	r24, 0x01CB
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	a1 f4       	brne	.+40     	; 0x30c <main+0x90>
			    {  
			        Command_Error_Flag = 0 ;     // 이전 Command_Error_Flag 리셋 
 2e4:	10 92 cb 01 	sts	0x01CB, r1
                   
					LcdCommand( ALLCLR ) ;       // LCD 화면 지움 
 2e8:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>

	                LcdMove(0,0); 
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	0e 94 be 02 	call	0x57c	; 0x57c <LcdMove>
	                LcdPuts("Bluetooth Prog"); 
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 84 02 	call	0x508	; 0x508 <LcdPuts>

		            LcdMove(1,0);    
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	0e 94 be 02 	call	0x57c	; 0x57c <LcdMove>
		            LcdPuts("Recv cnt = "); 
 304:	8d e1       	ldi	r24, 0x1D	; 29
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 84 02 	call	0x508	; 0x508 <LcdPuts>
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	10 e0       	ldi	r17, 0x00	; 0
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	44 c0       	rjmp	.+136    	; 0x3a4 <main+0x128>

  
                 
               for( i=0; i < recv_cnt ; i++) 
			   {
			      if( recv_data[i] == Cmd_Message_1[i] ) eq_count1++ ;
 31c:	a2 2f       	mov	r26, r18
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	fd 01       	movw	r30, r26
 322:	ec 54       	subi	r30, 0x4C	; 76
 324:	fe 4f       	sbci	r31, 0xFE	; 254
 326:	90 81       	ld	r25, Z
 328:	fd 01       	movw	r30, r26
 32a:	ec 58       	subi	r30, 0x8C	; 140
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	80 81       	ld	r24, Z
 330:	98 17       	cp	r25, r24
 332:	09 f4       	brne	.+2      	; 0x336 <main+0xba>
 334:	3f 5f       	subi	r19, 0xFF	; 255
			      if( recv_data[i] == Cmd_Message_2[i] ) eq_count2++ ; 
 336:	fd 01       	movw	r30, r26
 338:	ec 54       	subi	r30, 0x4C	; 76
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
 33c:	90 81       	ld	r25, Z
 33e:	fd 01       	movw	r30, r26
 340:	e5 58       	subi	r30, 0x85	; 133
 342:	fe 4f       	sbci	r31, 0xFE	; 254
 344:	80 81       	ld	r24, Z
 346:	98 17       	cp	r25, r24
 348:	09 f4       	brne	.+2      	; 0x34c <main+0xd0>
 34a:	4f 5f       	subi	r20, 0xFF	; 255
			      if( recv_data[i] == Cmd_Message_3[i] ) eq_count3++ ;
 34c:	fd 01       	movw	r30, r26
 34e:	ec 54       	subi	r30, 0x4C	; 76
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	90 81       	ld	r25, Z
 354:	fd 01       	movw	r30, r26
 356:	ed 57       	subi	r30, 0x7D	; 125
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 81       	ld	r24, Z
 35c:	98 17       	cp	r25, r24
 35e:	09 f4       	brne	.+2      	; 0x362 <main+0xe6>
 360:	5f 5f       	subi	r21, 0xFF	; 255
			      if( recv_data[i] == Cmd_Message_4[i] ) eq_count4++ ;  
 362:	fd 01       	movw	r30, r26
 364:	ec 54       	subi	r30, 0x4C	; 76
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	90 81       	ld	r25, Z
 36a:	fd 01       	movw	r30, r26
 36c:	e2 57       	subi	r30, 0x72	; 114
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	80 81       	ld	r24, Z
 372:	98 17       	cp	r25, r24
 374:	09 f4       	brne	.+2      	; 0x378 <main+0xfc>
 376:	6f 5f       	subi	r22, 0xFF	; 255
				  if( recv_data[i] == Cmd_Message_5[i] ) eq_count5++ ;  
 378:	fd 01       	movw	r30, r26
 37a:	ec 54       	subi	r30, 0x4C	; 76
 37c:	fe 4f       	sbci	r31, 0xFE	; 254
 37e:	90 81       	ld	r25, Z
 380:	fd 01       	movw	r30, r26
 382:	e8 56       	subi	r30, 0x68	; 104
 384:	fe 4f       	sbci	r31, 0xFE	; 254
 386:	80 81       	ld	r24, Z
 388:	98 17       	cp	r25, r24
 38a:	09 f4       	brne	.+2      	; 0x38e <main+0x112>
 38c:	7f 5f       	subi	r23, 0xFF	; 255
				  if( recv_data[i] == Cmd_Message_6[i] ) eq_count6++ ;  
 38e:	fd 01       	movw	r30, r26
 390:	ec 54       	subi	r30, 0x4C	; 76
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	90 81       	ld	r25, Z
 396:	ae 55       	subi	r26, 0x5E	; 94
 398:	be 4f       	sbci	r27, 0xFE	; 254
 39a:	8c 91       	ld	r24, X
 39c:	98 17       	cp	r25, r24
 39e:	09 f4       	brne	.+2      	; 0x3a2 <main+0x126>
 3a0:	1f 5f       	subi	r17, 0xFF	; 255

               }

  
                 
               for( i=0; i < recv_cnt ; i++) 
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	80 91 c9 01 	lds	r24, 0x01C9
 3a8:	28 17       	cp	r18, r24
 3aa:	08 f4       	brcc	.+2      	; 0x3ae <main+0x132>
 3ac:	b7 cf       	rjmp	.-146    	; 0x31c <main+0xa0>
				  if( recv_data[i] == Cmd_Message_5[i] ) eq_count5++ ;  
				  if( recv_data[i] == Cmd_Message_6[i] ) eq_count6++ ;  

               }

               if     ( eq_count1 == 6 )  cmd_data = 1 ;     // 명령 1
 3ae:	36 30       	cpi	r19, 0x06	; 6
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <main+0x13a>
 3b2:	11 e0       	ldi	r17, 0x01	; 1
 3b4:	15 c0       	rjmp	.+42     	; 0x3e0 <main+0x164>
               else if( eq_count2 == 7 )  cmd_data = 2 ;     // 명령 2   
 3b6:	47 30       	cpi	r20, 0x07	; 7
 3b8:	11 f4       	brne	.+4      	; 0x3be <main+0x142>
 3ba:	12 e0       	ldi	r17, 0x02	; 2
 3bc:	11 c0       	rjmp	.+34     	; 0x3e0 <main+0x164>
               else if( eq_count3 == 10)  cmd_data = 3 ;     // 명령 3
 3be:	5a 30       	cpi	r21, 0x0A	; 10
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <main+0x14a>
 3c2:	13 e0       	ldi	r17, 0x03	; 3
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <main+0x164>
               else if( eq_count4 == 9 )  cmd_data = 4 ;     // 명령 4
 3c6:	69 30       	cpi	r22, 0x09	; 9
 3c8:	11 f4       	brne	.+4      	; 0x3ce <main+0x152>
 3ca:	14 e0       	ldi	r17, 0x04	; 4
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <main+0x164>
			   else if( eq_count5 == 9 )  cmd_data = 5 ;     // 명령 4
 3ce:	79 30       	cpi	r23, 0x09	; 9
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <main+0x15a>
 3d2:	15 e0       	ldi	r17, 0x05	; 5
 3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <main+0x164>
			   else if( eq_count6 == 10)  cmd_data = 6 ;     // 명령 4
 3d6:	1a 30       	cpi	r17, 0x0A	; 10
 3d8:	11 f0       	breq	.+4      	; 0x3de <main+0x162>
 3da:	1e ef       	ldi	r17, 0xFE	; 254
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <main+0x164>
 3de:	16 e0       	ldi	r17, 0x06	; 6
			   else                       cmd_data = 0xFE ;  // 명령 오류

               eq_count1 = 0;  eq_count2 = 0;  eq_count3 = 0;  eq_count4 = 0; eq_count5 = 0;  eq_count6 = 0;

               new_recv_flag = 0 ; 
 3e0:	10 92 c8 01 	sts	0x01C8, r1

         /////////////////////////////////
        
         ////////  명령(Command) 처리 

			if( cmd_data ==  1 )          // 명령 1 이면
 3e4:	11 30       	cpi	r17, 0x01	; 1
 3e6:	11 f4       	brne	.+4      	; 0x3ec <main+0x170>
			{
                PORTB &= ~0x10;           // LED ON
 3e8:	c4 98       	cbi	0x18, 4	; 24
 3ea:	5f c0       	rjmp	.+190    	; 0x4aa <main+0x22e>
			}
			else if( cmd_data == 2 )      // 명령 2 이면
 3ec:	12 30       	cpi	r17, 0x02	; 2
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <main+0x178>
			{
                PORTB |= 0x10;            // LED OFF
 3f0:	c4 9a       	sbi	0x18, 4	; 24
 3f2:	5b c0       	rjmp	.+182    	; 0x4aa <main+0x22e>
			}
			else if( cmd_data == 3 )      // 명령 3 이면
 3f4:	13 30       	cpi	r17, 0x03	; 3
 3f6:	21 f4       	brne	.+8      	; 0x400 <main+0x184>
			{
                PORTB ^= 0x10;            // LED Toggle
 3f8:	88 b3       	in	r24, 0x18	; 24
 3fa:	8f 25       	eor	r24, r15
 3fc:	88 bb       	out	0x18, r24	; 24
 3fe:	55 c0       	rjmp	.+170    	; 0x4aa <main+0x22e>
			}

			else if( cmd_data == 4 )     // 명령 4 이면
 400:	14 30       	cpi	r17, 0x04	; 4
 402:	69 f5       	brne	.+90     	; 0x45e <main+0x1e2>
			{

		        HexToDec(recv_cnt,10);   // 수신된 바이트수 recv_cnt 십진수로 변환
 404:	80 91 c9 01 	lds	r24, 0x01C9
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	6a e0       	ldi	r22, 0x0A	; 10
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	0e 94 c2 00 	call	0x184	; 0x184 <HexToDec>

                SerialPutString( "Received Data Count = " );     // 휴대폰으로 메시지 전송
 412:	89 e2       	ldi	r24, 0x29	; 41
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 b8 00 	call	0x170	; 0x170 <SerialPutString>
//              SerialPutString( Send_Message_1 );               // 휴대폰으로 메시지 전송

                SerialPutChar( NumToAsc(cnumber[2]));  //  변수 recv_cnt 값을 휴대폰으로 전송
 41a:	80 91 b0 01 	lds	r24, 0x01B0


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 41e:	8a 30       	cpi	r24, 0x0A	; 10
 420:	10 f0       	brcs	.+4      	; 0x426 <main+0x1aa>
 422:	89 5c       	subi	r24, 0xC9	; 201
 424:	01 c0       	rjmp	.+2      	; 0x428 <main+0x1ac>
	else	      Num += 0x30;
 426:	80 5d       	subi	r24, 0xD0	; 208
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 428:	5d 9b       	sbis	0x0b, 5	; 11
 42a:	fe cf       	rjmp	.-4      	; 0x428 <main+0x1ac>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 42c:	8c b9       	out	0x0c, r24	; 12

                SerialPutString( "Received Data Count = " );     // 휴대폰으로 메시지 전송
//              SerialPutString( Send_Message_1 );               // 휴대폰으로 메시지 전송

                SerialPutChar( NumToAsc(cnumber[2]));  //  변수 recv_cnt 값을 휴대폰으로 전송
                SerialPutChar( NumToAsc(cnumber[1])); 
 42e:	80 91 af 01 	lds	r24, 0x01AF


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 432:	8a 30       	cpi	r24, 0x0A	; 10
 434:	10 f0       	brcs	.+4      	; 0x43a <main+0x1be>
 436:	89 5c       	subi	r24, 0xC9	; 201
 438:	01 c0       	rjmp	.+2      	; 0x43c <main+0x1c0>
	else	      Num += 0x30;
 43a:	80 5d       	subi	r24, 0xD0	; 208
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 43c:	5d 9b       	sbis	0x0b, 5	; 11
 43e:	fe cf       	rjmp	.-4      	; 0x43c <main+0x1c0>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 440:	8c b9       	out	0x0c, r24	; 12
                SerialPutString( "Received Data Count = " );     // 휴대폰으로 메시지 전송
//              SerialPutString( Send_Message_1 );               // 휴대폰으로 메시지 전송

                SerialPutChar( NumToAsc(cnumber[2]));  //  변수 recv_cnt 값을 휴대폰으로 전송
                SerialPutChar( NumToAsc(cnumber[1])); 
                SerialPutChar( NumToAsc(cnumber[0])); 
 442:	80 91 ae 01 	lds	r24, 0x01AE


char NumToAsc(char Num)
{
	
	if( Num > 9 ) Num += 0x37;
 446:	8a 30       	cpi	r24, 0x0A	; 10
 448:	10 f0       	brcs	.+4      	; 0x44e <main+0x1d2>
 44a:	89 5c       	subi	r24, 0xC9	; 201
 44c:	01 c0       	rjmp	.+2      	; 0x450 <main+0x1d4>
	else	      Num += 0x30;
 44e:	80 5d       	subi	r24, 0xD0	; 208
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 450:	5d 9b       	sbis	0x0b, 5	; 11
 452:	fe cf       	rjmp	.-4      	; 0x450 <main+0x1d4>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 454:	8c b9       	out	0x0c, r24	; 12
// 한 문자를 송신한다.
//======================================

void SerialPutChar(char ch)
{
	while(!(UCSR0A & (1<<UDRE)));			// 버퍼가 빌 때를 기다림
 456:	5d 9b       	sbis	0x0b, 5	; 11
 458:	fe cf       	rjmp	.-4      	; 0x456 <main+0x1da>
  	UDR0 = ch;								// 버퍼에 문자를 쓴다
 45a:	0c b9       	out	0x0c, r16	; 12
 45c:	26 c0       	rjmp	.+76     	; 0x4aa <main+0x22e>
                SerialPutChar( NumToAsc(cnumber[0])); 

                SerialPutChar('\n');                  // 휴대폰으로 데이터 전송시 Line Feed('\n')를 항상 끝에 전송해야함

			}
			else if( cmd_data == 5 )      // 명령 5 이면
 45e:	15 30       	cpi	r17, 0x05	; 5
 460:	21 f4       	brne	.+8      	; 0x46a <main+0x1ee>
			{
                PORTB |= 0x40;            // Buzzer on
 462:	c6 9a       	sbi	0x18, 6	; 24
 464:	22 c0       	rjmp	.+68     	; 0x4aa <main+0x22e>
 466:	1f ef       	ldi	r17, 0xFF	; 255
 468:	20 c0       	rjmp	.+64     	; 0x4aa <main+0x22e>
			}

            else if( cmd_data == 6 )      // 명령 6 이면
 46a:	16 30       	cpi	r17, 0x06	; 6
 46c:	11 f4       	brne	.+4      	; 0x472 <main+0x1f6>
			{
                PORTB &= ~0x40;            // LED Toggle
 46e:	c6 98       	cbi	0x18, 6	; 24
 470:	1c c0       	rjmp	.+56     	; 0x4aa <main+0x22e>
			}


            else if( cmd_data == 0xFE )      //  명령 오류 이면 
 472:	1e 3f       	cpi	r17, 0xFE	; 254
 474:	d1 f4       	brne	.+52     	; 0x4aa <main+0x22e>
			{

                SerialPutString( "Command Error!!  Try again.\n" ); //  명령 오류 메시지 전송
 476:	80 e4       	ldi	r24, 0x40	; 64
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 b8 00 	call	0x170	; 0x170 <SerialPutString>

			    LcdCommand( 0x01) ;                                 // LCD Claear
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>

			    LcdMove(0, 0 );                                     // LCD에 오류메시지 디스플레이
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	0e 94 be 02 	call	0x57c	; 0x57c <LcdMove>
		        LcdPuts("Cmd Error!!"); 
 48c:	8d e5       	ldi	r24, 0x5D	; 93
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 84 02 	call	0x508	; 0x508 <LcdPuts>
			    LcdMove(1, 0 );
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	0e 94 be 02 	call	0x57c	; 0x57c <LcdMove>
		        LcdPuts("Try Again."); 
 49c:	89 e6       	ldi	r24, 0x69	; 105
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 84 02 	call	0x508	; 0x508 <LcdPuts>

				Command_Error_Flag = 1;                              // 명령 오류 플래그 셋
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 cb 01 	sts	0x01CB, r24


     ///////////////////////////////////////////////////////////////


		   if( Command_Error_Flag == 0  &&  cmd_data != 0xFF  )   // 명령에 오류가 없고 명령초기상태(0xFF)가 아니면   
 4aa:	80 91 cb 01 	lds	r24, 0x01CB
 4ae:	88 23       	and	r24, r24
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <main+0x238>
 4b2:	0f cf       	rjmp	.-482    	; 0x2d2 <main+0x56>
 4b4:	1f 3f       	cpi	r17, 0xFF	; 255
 4b6:	09 f4       	brne	.+2      	; 0x4ba <main+0x23e>
 4b8:	0c cf       	rjmp	.-488    	; 0x2d2 <main+0x56>
		   {  

	           LcdMove(1, 11); 
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	6b e0       	ldi	r22, 0x0B	; 11
 4be:	0e 94 be 02 	call	0x57c	; 0x57c <LcdMove>
               Display_Number_LCD( recv_cnt, 3 ) ;    // 수신된 바이트수 recv_cnt를 십진수로 변환하여 LCD에 디스플레이
 4c2:	80 91 c9 01 	lds	r24, 0x01C9
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Display_Number_LCD>
 4ce:	01 cf       	rjmp	.-510    	; 0x2d2 <main+0x56>

000004d0 <LcdPutchar>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4d0:	95 e3       	ldi	r25, 0x35	; 53
 4d2:	29 2f       	mov	r18, r25
 4d4:	2a 95       	dec	r18
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LcdPutchar+0x4>
 4d8:	29 2f       	mov	r18, r25
 4da:	2a 95       	dec	r18
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LcdPutchar+0xa>
 4de:	29 2f       	mov	r18, r25
 4e0:	2a 95       	dec	r18
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LcdPutchar+0x10>
 4e4:	29 2f       	mov	r18, r25
 4e6:	2a 95       	dec	r18
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LcdPutchar+0x16>
 4ea:	9a 95       	dec	r25
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LcdPutchar+0x1a>
 4ee:	98 2f       	mov	r25, r24
 4f0:	90 7f       	andi	r25, 0xF0	; 240
 4f2:	95 60       	ori	r25, 0x05	; 5
 4f4:	95 bb       	out	0x15, r25	; 21
 4f6:	9b 7f       	andi	r25, 0xFB	; 251
 4f8:	95 bb       	out	0x15, r25	; 21
 4fa:	82 95       	swap	r24
 4fc:	80 7f       	andi	r24, 0xF0	; 240
 4fe:	85 60       	ori	r24, 0x05	; 5
 500:	85 bb       	out	0x15, r24	; 21
 502:	8b 7f       	andi	r24, 0xFB	; 251
 504:	85 bb       	out	0x15, r24	; 21
 506:	08 95       	ret

00000508 <LcdPuts>:
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ec 01       	movw	r28, r24
 50e:	03 c0       	rjmp	.+6      	; 0x516 <LcdPuts+0xe>
 510:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LcdPutchar>
 514:	21 96       	adiw	r28, 0x01	; 1
 516:	88 81       	ld	r24, Y
 518:	88 23       	and	r24, r24
 51a:	d1 f7       	brne	.-12     	; 0x510 <LcdPuts+0x8>
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <write_command>:
 522:	98 2f       	mov	r25, r24
 524:	90 7f       	andi	r25, 0xF0	; 240
 526:	94 60       	ori	r25, 0x04	; 4
 528:	95 bb       	out	0x15, r25	; 21
 52a:	9b 7f       	andi	r25, 0xFB	; 251
 52c:	95 bb       	out	0x15, r25	; 21
 52e:	82 95       	swap	r24
 530:	80 7f       	andi	r24, 0xF0	; 240
 532:	84 60       	ori	r24, 0x04	; 4
 534:	85 bb       	out	0x15, r24	; 21
 536:	8b 7f       	andi	r24, 0xFB	; 251
 538:	85 bb       	out	0x15, r24	; 21
 53a:	85 e0       	ldi	r24, 0x05	; 5
 53c:	8a 95       	dec	r24
 53e:	f1 f7       	brne	.-4      	; 0x53c <write_command+0x1a>
 540:	08 95       	ret

00000542 <LcdCommand>:
 542:	1f 93       	push	r17
 544:	18 2f       	mov	r17, r24
 546:	85 e3       	ldi	r24, 0x35	; 53
 548:	98 2f       	mov	r25, r24
 54a:	9a 95       	dec	r25
 54c:	f1 f7       	brne	.-4      	; 0x54a <LcdCommand+0x8>
 54e:	98 2f       	mov	r25, r24
 550:	9a 95       	dec	r25
 552:	f1 f7       	brne	.-4      	; 0x550 <LcdCommand+0xe>
 554:	98 2f       	mov	r25, r24
 556:	9a 95       	dec	r25
 558:	f1 f7       	brne	.-4      	; 0x556 <LcdCommand+0x14>
 55a:	98 2f       	mov	r25, r24
 55c:	9a 95       	dec	r25
 55e:	f1 f7       	brne	.-4      	; 0x55c <LcdCommand+0x1a>
 560:	8a 95       	dec	r24
 562:	f1 f7       	brne	.-4      	; 0x560 <LcdCommand+0x1e>
 564:	81 2f       	mov	r24, r17
 566:	0e 94 91 02 	call	0x522	; 0x522 <write_command>
 56a:	11 50       	subi	r17, 0x01	; 1
 56c:	12 30       	cpi	r17, 0x02	; 2
 56e:	20 f4       	brcc	.+8      	; 0x578 <LcdCommand+0x36>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 570:	80 e4       	ldi	r24, 0x40	; 64
 572:	9f e1       	ldi	r25, 0x1F	; 31
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <LcdCommand+0x32>
 578:	1f 91       	pop	r17
 57a:	08 95       	ret

0000057c <LcdMove>:
 57c:	82 95       	swap	r24
 57e:	88 0f       	add	r24, r24
 580:	88 0f       	add	r24, r24
 582:	80 7c       	andi	r24, 0xC0	; 192
 584:	68 0f       	add	r22, r24
 586:	86 2f       	mov	r24, r22
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
 58e:	08 95       	ret

00000590 <LcdInit>:
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	84 bb       	out	0x14, r24	; 20
 594:	80 e6       	ldi	r24, 0x60	; 96
 596:	9a ee       	ldi	r25, 0xEA	; 234
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <LcdInit+0x8>
 59c:	80 e3       	ldi	r24, 0x30	; 48
 59e:	0e 94 91 02 	call	0x522	; 0x522 <write_command>
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	9e e4       	ldi	r25, 0x4E	; 78
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LcdInit+0x16>
 5aa:	80 e3       	ldi	r24, 0x30	; 48
 5ac:	0e 94 91 02 	call	0x522	; 0x522 <write_command>
 5b0:	80 ea       	ldi	r24, 0xA0	; 160
 5b2:	9f e0       	ldi	r25, 0x0F	; 15
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <LcdInit+0x24>
 5b8:	82 e3       	ldi	r24, 0x32	; 50
 5ba:	0e 94 91 02 	call	0x522	; 0x522 <write_command>
 5be:	88 e2       	ldi	r24, 0x28	; 40
 5c0:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
 5c4:	88 e0       	ldi	r24, 0x08	; 8
 5c6:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
 5d0:	86 e0       	ldi	r24, 0x06	; 6
 5d2:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
 5d6:	8c e0       	ldi	r24, 0x0C	; 12
 5d8:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
 5dc:	08 95       	ret

000005de <LcdNewchar>:
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	8b 01       	movw	r16, r22
 5e8:	88 0f       	add	r24, r24
 5ea:	88 0f       	add	r24, r24
 5ec:	88 0f       	add	r24, r24
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	0e 94 a1 02 	call	0x542	; 0x542 <LcdCommand>
 5f4:	c0 e0       	ldi	r28, 0x00	; 0
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
 5f8:	f8 01       	movw	r30, r16
 5fa:	ec 0f       	add	r30, r28
 5fc:	fd 1f       	adc	r31, r29
 5fe:	80 81       	ld	r24, Z
 600:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LcdPutchar>
 604:	21 96       	adiw	r28, 0x01	; 1
 606:	c8 30       	cpi	r28, 0x08	; 8
 608:	d1 05       	cpc	r29, r1
 60a:	b1 f7       	brne	.-20     	; 0x5f8 <LcdNewchar+0x1a>
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <__udivmodhi4>:
 616:	aa 1b       	sub	r26, r26
 618:	bb 1b       	sub	r27, r27
 61a:	51 e1       	ldi	r21, 0x11	; 17
 61c:	07 c0       	rjmp	.+14     	; 0x62c <__udivmodhi4_ep>

0000061e <__udivmodhi4_loop>:
 61e:	aa 1f       	adc	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	a6 17       	cp	r26, r22
 624:	b7 07       	cpc	r27, r23
 626:	10 f0       	brcs	.+4      	; 0x62c <__udivmodhi4_ep>
 628:	a6 1b       	sub	r26, r22
 62a:	b7 0b       	sbc	r27, r23

0000062c <__udivmodhi4_ep>:
 62c:	88 1f       	adc	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	5a 95       	dec	r21
 632:	a9 f7       	brne	.-22     	; 0x61e <__udivmodhi4_loop>
 634:	80 95       	com	r24
 636:	90 95       	com	r25
 638:	bc 01       	movw	r22, r24
 63a:	cd 01       	movw	r24, r26
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
